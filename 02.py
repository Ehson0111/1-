import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests
from datetime import datetime
import asyncio
import uuid
import json
import re
import urllib.parse
import –æ—Ç—á–µ—Ç
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ODATA_URL = os.getenv('ODATA_URL', 'http://localhost/proekt/odata/standard.odata/')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
user_carts = {}
user_sessions = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderStates(StatesGroup):
    selecting_products = State()
    entering_quantity = State()
    selecting_payment = State()
    entering_address = State()
    confirming_order = State()

class AuthStates(StatesGroup):
    entering_phone = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8 BOM
def decode_response(response):
    try:
        response.encoding = 'utf-8-sig'
        return response.json()
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        raise

from aiogram.types import BotCommand

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="login", description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        BotCommand(command="newclient", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand(command="products", description="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
        BotCommand(command="neworder", description="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"),
        BotCommand(command="cart", description="–ö–æ—Ä–∑–∏–Ω–∞"),
        BotCommand(command="orders", description="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
        BotCommand(command="couriers", description="–ö—É—Ä—å–µ—Ä—ã"),
    ]
    await bot.set_my_commands(commands)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def is_user_authenticated(user_id):
    return user_id in user_sessions and user_sessions[user_id].get('client_key')

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    await message.answer(
        "<b>ü§ñ –ë–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "/newclient [–∏–º—è] [—Ç–µ–ª–µ—Ñ–æ–Ω] [–∞–¥—Ä–µ—Å] - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/neworder - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/cart - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
        "/status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞] - –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "/couriers - –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã (/products)\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ (/neworder)\n"
        "4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å (/status)\n"
        "5. –í—ã—Ö–æ–¥ (/logout)"
    )

@dp.message(Command("login"))
async def cmd_login(message: types.Message, state: FSMContext):
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AuthStates.entering_phone)

@dp.message(AuthStates.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.text.strip()
    if not re.match(r'^\+?\d{10,12}$', phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    try:
        phone_encoded = urllib.parse.quote(phone)
        user_id_encoded = urllib.parse.quote(str(user_id))
        url = f"{ODATA_URL}Catalog_–ö–ª–∏–µ–Ω—Ç—ã?$filter=–ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞ eq '{phone_encoded}' and telegram_id eq '{user_id_encoded}'&$format=json"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        clients = decode_response(response).get('value', [])
        
        if not clients:
            await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /newclient")
            await state.clear()
            return
        
        client = clients[0]
        user_sessions[user_id] = {
            'client_key': client['Ref_Key'],
            'phone': phone,
            'name': client['Description'],
            'address': client.get('–ê–¥—Ä–µ—Å—Å–î–æ—Å—Ç–∞–≤–∫–∏', '')
        }
        
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, {client['Description']}!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await state.clear()

@dp.message(Command("products"))
async def cmd_products(message: types.Message):
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã?$filter=DeletionMark eq false&$top=20&$format=json",
            timeout=10
        )
        response.raise_for_status()
        products = decode_response(response).get('value', [])
        if not products:
            await message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for product in products:
            text = (
                f"<b>{product.get('Description', '')}</b>\n"
                f"üí∞ <i>–¶–µ–Ω–∞:</i> {product.get('–¶–µ–Ω–∞', 'N/A')} —Ä—É–±.\n"
                f"üìù <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {product.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç')}\n"
                f"‚öñÔ∏è <i>–ú–∞—Å—Å–∞:</i> {product.get('–ú–∞—Å—Å–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üè≠ <i>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</i> {product.get('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìÖ <i>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</i> {product.get('–°—Ä–æ–∫–ì–æ–¥–Ω–æ—Å—Ç–∏', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"#Ô∏è‚É£ <i>–ö–æ–¥:</i> {product.get('Code', '')}\n"
            )
            image_url = product.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
            if image_url:
                try:
                    await message.answer_photo(
                        photo=image_url,
                        caption=text
                    )
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
                    await message.answer(text)
            else:
                await message.answer(text)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")

@dp.message(Command("neworder"))
async def cmd_new_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_authenticated(user_id):
        await message.answer(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login\n"
            "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /newclient"
        )
        return
    
    user_carts[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã?$filter=DeletionMark eq false&$format=json",
            timeout=10
        )
        response.raise_for_status()
        products = decode_response(response).get('value', [])
        if not products:
            await message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        builder = InlineKeyboardBuilder()
        for product in products:
            builder.add(
                types.InlineKeyboardButton(
                    text=f"{product.get('Description', '')} ({product.get('–¶–µ–Ω–∞', 'N/A')} —Ä—É–±.)",
                    callback_data=f"product_{product['Ref_Key']}"
                )
            )
        builder.add(
            types.InlineKeyboardButton(
                text="üõí –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="finish_selection"
            )
        )
        builder.adjust(1)
        await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=builder.as_markup())
        await state.set_state(OrderStates.selecting_products)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@dp.callback_query(lambda c: c.data.startswith("product_"), OrderStates.selecting_products)
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_")[1]
    await state.update_data(current_product=product_id)
    await callback.message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):")
    await state.set_state(OrderStates.entering_quantity)
    await callback.answer()

@dp.message(OrderStates.entering_quantity)
async def enter_quantity(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        data = await state.get_data()
        product_id = data['current_product']
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã(guid'{product_id}')?$format=json",
            timeout=10
        )
        response.raise_for_status()
        product = decode_response(response)
        
        if user_id not in user_carts:
            user_carts[user_id] = []
            
        user_carts[user_id].append({
            'Ref_Key': product_id,
            'Description': product['Description'],
            '–¶–µ–Ω–∞': float(product.get('–¶–µ–Ω–∞', 0)),
            'Quantity': quantity,
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': product.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '')
        })
        
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product['Description']} x{quantity}")
        
        cart_message = "<b>üõí –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total = 0
        for item in user_carts[user_id]:
            item_total = item['–¶–µ–Ω–∞'] * item['Quantity']
            cart_message += f"‚ñ™ {item['Description']} x{item['Quantity']} = {item_total:.2f} —Ä—É–±.\n"
            total += item_total
            
        cart_message += f"\n<b>üí∞ –ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±.</b>"
        await message.answer(cart_message)
        
        await show_product_selection(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

async def show_product_selection(message: types.Message, state: FSMContext):
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã?$filter=DeletionMark eq false&$format=json",
            timeout=10
        )
        response.raise_for_status()
        products = decode_response(response).get('value', [])
        
        if not products:
            await message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
            
        builder = InlineKeyboardBuilder()
        for product in products:
            builder.add(
                types.InlineKeyboardButton(
                    text=f"{product.get('Description', '')} ({product.get('–¶–µ–Ω–∞', 'N/A')} —Ä—É–±.)",
                    callback_data=f"product_{product['Ref_Key']}"
                )
            )
        builder.add(
            types.InlineKeyboardButton(
                text="üõí –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="finish_selection"
            )
        )
        builder.adjust(1)
        await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=builder.as_markup())
        await state.set_state(OrderStates.selecting_products)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@dp.callback_query(lambda c: c.data == "finish_selection", OrderStates.selecting_products)
async def finish_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not user_carts.get(user_id):
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await state.clear()
        return
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üí≥ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_cash"),
        types.InlineKeyboardButton(text="üí∏ –ö–∞—Ä—Ç–∞", callback_data="payment_card")
    )
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=builder.as_markup())
    await state.set_state(OrderStates.selecting_payment)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("payment_"), OrderStates.selecting_payment)
async def select_payment(callback: types.CallbackQuery, state: FSMContext):
    payment_method = callback.data.split("_")[1]
    await state.update_data(payment_method=payment_method)
    user_id = callback.from_user.id
    default_address = user_sessions[user_id].get('address', '')
    await callback.message.edit_text(
        f"üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n(–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {default_address}):"
    )
    await state.set_state(OrderStates.entering_address)
    await callback.answer()

@dp.message(OrderStates.entering_address)
async def enter_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    user_id = message.from_user.id
    await state.update_data(address=address)
    data = await state.get_data()
    cart = user_carts.get(user_id, [])
    total = sum(item['–¶–µ–Ω–∞'] * item['Quantity'] for item in cart)
    order_text = "<b>üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    
    for item in cart:
        order_text += f"{item['Description']} x{item['Quantity']} = {item['–¶–µ–Ω–∞'] * item['Quantity']:.2f} —Ä—É–±.\n"
        if item.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'):
            try:
                await message.answer_photo(
                    photo=item['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
                    caption=f"{item['Description']}"
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                pass
                
    order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total:.2f} —Ä—É–±.\n"
    order_text += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {'–ù–∞–ª–∏—á–Ω—ã–µ' if data['payment_method'] == 'cash' else '–ö–∞—Ä—Ç–∞'}\n"
    order_text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}"
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    )
    await message.answer(order_text, reply_markup=builder.as_markup())
    await state.set_state(OrderStates.confirming_order)

@dp.callback_query(lambda c: c.data == "confirm_order", OrderStates.confirming_order)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    cart = user_carts.get(user_id, [])
    total = sum(item['–¶–µ–Ω–∞'] * item['Quantity'] for item in cart)
    
    try:
        client_key = user_sessions[user_id]['client_key']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é
        order_data = {
            "Date": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
            "–ö–ª–∏–µ–Ω—Ç—ã_Key": client_key,
            "–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤": str(total),
            "–ú–µ—Ç–æ–¥–û–ø–ª–∞—Ç—ã": "–ù–∞–ª–∏—á–Ω—ã–µ" if data["payment_method"] == "cash" else "–ö–∞—Ä—Ç–∞",
            "–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞": "–ù–æ–≤—ã–π",
            "–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏": data["address"],
            "—Ç–æ–≤–∞—Ä": [
                {
                    "Ref_Key": str(uuid.uuid4()),
                    "LineNumber": idx + 1,
                    "–ü—Ä–æ–¥—É–∫—Ç—ã_Key": item["Ref_Key"],
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item["Quantity"]
                } for idx, item in enumerate(cart)
            ]
        }

        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Prefer': 'return=representation'
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        response = requests.post(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞",
            json=order_data,
            headers=headers,
            timeout=15
        )
        
        if response.status_code != 201:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.text}")

        order_info = decode_response(response)
        order_key = order_info['Ref_Key']
        order_number = order_info.get('Number', 'N/A')
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        courier_assigned = await assign_courier(order_key, user_id, data["address"])
        
        if courier_assigned:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—å–µ—Ä–∞
            update_data = {
                "–ö—É—Ä—å–µ—Ä_Key": courier_assigned['courier_key'],
                "–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            }
            
            update_response = requests.patch(
                f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞(guid'{order_key}')",
                json=update_data,
                headers=headers,
                timeout=10
            )
            
            if update_response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {update_response.text}")

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_number} —Å–æ–∑–¥–∞–Ω!\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n"
            f"üí∞ –°—É–º–º–∞: {total:.2f} —Ä—É–±.\n"
            f"üö¥ –ö—É—Ä—å–µ—Ä: {courier_assigned.get('courier_name', '–±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω')}"
        )
        user_carts.pop(user_id, None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
    finally:
        await state.clear()

async def assign_courier(order_key, user_id, address):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        response = requests.get(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã?$filter=DeletionMark eq false and –°—Ç–∞—Ç—É—Å eq '–°–≤–æ–±–æ–¥–µ–Ω'&$top=1&$format=json",
            timeout=10
        )
        response.raise_for_status()
        couriers = decode_response(response).get('value', [])
        
        if not couriers:
            logger.warning("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤")
            await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–∑–∂–µ")
            return None
            
        courier = couriers[0]
        courier_key = courier['Ref_Key']
        courier_name = courier.get('Description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—å–µ—Ä')

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
        assignment = {
            "Ref_Key": str(uuid.uuid4()),
            "Date": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
            "DeletionMark": False,
            "Posted": True,
            "–ó–∞–∫–∞–∑_Key": order_key,
            "–ö—É—Ä—å–µ—Ä_Key": courier_key,
            "–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏": "–ù–∞–∑–Ω–∞—á–µ–Ω",
            "–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏": address
        }

        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json'
        }

        response = requests.post(
            f"{ODATA_URL}Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞",
            json=assignment,
            headers=headers,
            timeout=10
        )
        
        if response.status_code != 201:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: {response.text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞
        response = requests.patch(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã(guid'{courier_key}')",
            json={"–°—Ç–∞—Ç—É—Å": "–ó–∞–Ω—è—Ç"},
            headers=headers,
            timeout=10
        )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞: {response.text}")

        await bot.send_message(
            user_id,
            f"üö¥ –ö—É—Ä—å–µ—Ä {courier_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑!"
        )
        
        return {
            'courier_key': courier_key,
            'courier_name': courier_name
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: {e}")
        await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
        return None

@dp.callback_query(lambda c: c.data == "cancel_order", OrderStates.confirming_order)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_carts.pop(user_id, None)
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()

@dp.message(Command("cart"))
async def cmd_cart(message: types.Message):
    user_id = message.from_user.id
    if not await is_user_authenticated(user_id):
        await message.answer(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login\n"
            "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /newclient"
        )
        return
    
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    for item in cart:
        subtotal = item['–¶–µ–Ω–∞'] * item['Quantity']
        text += f"{item['Description']} x{item['Quantity']} = {subtotal:.2f} —Ä—É–±.\n"
        if item.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'):
            try:
                await message.answer_photo(
                    photo=item['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
                    caption=f"{item['Description']}"
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                pass
        total += subtotal
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total:.2f} —Ä—É–±."
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_cart"))
    await message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts.pop(user_id, None)
    await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback.answer()

# @dp.message(Command("orders"))
# async def cmd_orders(message: types.Message):
#     user_id = message.from_user.id
#     if not await is_user_authenticated(user_id):
#         await message.answer(
#             "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login\n"
#             "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /newclient"
#         )
#         return
    
#     client_key = user_sessions[user_id]['client_key']
#     try:
#         client_key_encoded = urllib.parse.quote(client_key)
        
#         response = requests.get(
#             f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞?$filter=–ö–ª–∏–µ–Ω—Ç—ã_Key eq guid'{client_key_encoded}'&$orderby=Date desc&$top=10&$format=json",
#             timeout=10
#         )

#         response.raise_for_status()
#         orders = decode_response(response).get('value', [])
#         if not orders:
#             await message.answer("üõí –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#             return
#         builder = InlineKeyboardBuilder()
#         for order in orders:
#             order_date = datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y')
#             builder.add(types.InlineKeyboardButton(
#                 text=f"‚Ññ{order['Number']} –æ—Ç {order_date}",
#                 callback_data=f"order_{order['Ref_Key']}"
#             ))
#         builder.adjust(1)
#         await message.answer("üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=builder.as_markup())
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
#         await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    user_id = message.from_user.id
    if not await is_user_authenticated(user_id):
        await message.answer(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login\n"
            "–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /newclient"
        )
        return
    
    try:
        client_key = user_sessions[user_id]['client_key']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        url = f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞?$filter=–ö–ª–∏–µ–Ω—Ç—ã_Key eq guid'{client_key}'&$orderby=Date desc&$top=10&$format=json"
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OData: {url}")  # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
        if response.status_code == 200 and response.text.strip():
            try:
                orders = response.json().get('value', [])
            except ValueError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –æ—Ç–≤–µ—Ç")
                orders = []
        else:
            orders = []
        
        if not orders:
            await message.answer("üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
            
        builder = InlineKeyboardBuilder()
        for order in orders:
            try:
                order_date = datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y')
                btn_text = f"‚Ññ{order.get('Number', 'N/A')} –æ—Ç {order_date} - {order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', '')}"
                builder.add(types.InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"order_{order['Ref_Key']}"  # –ë—ã–ª–æ: f"order_{order['Ref_Key']"
                ))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ {order}: {e}")
                continue
                
        builder.adjust(1)
        await message.answer("üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=builder.as_markup())
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OData: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.callback_query(lambda c: c.data.startswith("order_"))
async def show_order_details(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[1]
    try:
        order_id_encoded = urllib.parse.quote(order_id)
        response = requests.get(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞(guid'{order_id_encoded}')?$expand=–¢–æ–≤–∞—Ä—ã($expand=–ü—Ä–æ–¥—É–∫—Ç—ã)&$format=json",
            timeout=10
        )
        response.raise_for_status()
        order = decode_response(response)
        order_date = datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y %H:%M')
        products_text = ""
        for item in order.get('–¢–æ–≤–∞—Ä—ã', []):
            product = item.get('–ü—Ä–æ–¥—É–∫—Ç—ã', {})
            products_text += f"- {product.get('Description', 'N/A')} x{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)} = {item.get('–°—É–º–º–∞', 0)} —Ä—É–±.\n"
        text = (
            f"<b>üìÑ –ó–∞–∫–∞–∑ ‚Ññ{order['Number']}</b>\n"
            f"üìÖ <i>–î–∞—Ç–∞:</i> {order_date}\n"
            f"üí∞ <i>–°—É–º–º–∞:</i> {order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', 'N/A')} —Ä—É–±.\n"
            f"üõí <i>–°—Ç–∞—Ç—É—Å:</i> {order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', 'N/A')}\n"
            f"üìç <i>–ê–¥—Ä–µ—Å:</i> {order.get('–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏', 'N/A')}\n"
            f"üì¶ <i>–¢–æ–≤–∞—Ä—ã:</i>\n{products_text}"
        )
        await callback.message.edit_text(text)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞", show_alert=True)

@dp.message(Command("newclient"))
async def cmd_new_client(message: types.Message):
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /newclient [–∏–º—è] [—Ç–µ–ª–µ—Ñ–æ–Ω] [–∞–¥—Ä–µ—Å]")
        return
    
    name, phone, address = args[1], args[2], args[3]
    user_id = str(message.from_user.id)
    
    if not re.match(r'^\+?\d{10,12}$', phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    new_client = {
        "Description": name,
        "Code": phone[-6:],
        "–ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞": phone,
        "–ê–¥—Ä–µ—Å—Å–î–æ—Å—Ç–∞–≤–∫–∏": address,
        "telegram_id": user_id
    }
    
    headers = {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json'
    }
    
    try:
        response = requests.post(
            f"{ODATA_URL}Catalog_–ö–ª–∏–µ–Ω—Ç—ã",
            json=new_client,
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 201:
            client = decode_response(response)
            user_sessions[user_id] = {
                'client_key': client['Ref_Key'],
                'phone': phone,
                'name': name,
                'address': address
            }
            await message.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        else:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {response.text}"
            logger.error(error_msg)
            await message.answer(error_msg)
            
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}"
        logger.error(error_msg)
        await message.answer(error_msg)

@dp.message(Command("couriers"))
async def cmd_couriers(message: types.Message):
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã?$filter=DeletionMark eq false&$format=json",
            timeout=10
        )
        response.raise_for_status()
        couriers = decode_response(response).get('value', [])
        if not couriers:
            await message.answer("üö¥ –ö—É—Ä—å–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        result = "<b>üö¥ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã:</b>\n\n"
        for c in couriers[:10]:
            result += (
                f"<b>{c.get('Description', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>\n"
                f"üìû <i>{c.get('–ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</i>\n"
                f"üõµ <i>{c.get('–°—Ç–∞—Ç—É—Å', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</i>\n\n"
            )
        await message.answer(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤")

@dp.message(Command("logout"))
async def cmd_logout(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_sessions:
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = user_sessions[user_id].get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        del user_sessions[user_id]
        await message.answer(f"üëã {user_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞]")
        return
        
    order_number = args[1].strip()
    order_number_encoded = urllib.parse.quote(order_number)
    
    try:
        response = requests.get(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞?$filter=Number eq '{order_number_encoded}'&$format=json",
            timeout=10
        )
        response.raise_for_status()
        orders = decode_response(response).get('value', [])
        
        if not orders:
            await message.answer("üìã –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        order = orders[0]
        order_key_encoded = urllib.parse.quote(order['Ref_Key'])
        
        delivery_response = requests.get(
            f"{ODATA_URL}Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞?$filter=–ó–∞–∫–∞–∑_Key eq guid'{order_key_encoded}'&$expand=–ö—É—Ä—å–µ—Ä&$format=json",
            timeout=10
        )
        delivery_response.raise_for_status()
        deliveries = decode_response(delivery_response).get('value', [])
        
        delivery_status = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        courier_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        if deliveries:
            delivery = deliveries[0]
            delivery_status = delivery.get('–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
            courier = delivery.get('–ö—É—Ä—å–µ—Ä', {})
            courier_name = courier.get('Description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—å–µ—Ä')

        text = (
            f"<b>üìÑ –ó–∞–∫–∞–∑ ‚Ññ{order['Number']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y %H:%M')}\n"
            f"üõí –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üö¥ –ö—É—Ä—å–µ—Ä: {courier_name}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_status}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.get('–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –°—É–º–º–∞: {order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', '0')} —Ä—É–±."
        )
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")

async def main():
    await dp.start_polling(bot)
    await set_bot_commands(bot)

if __name__ == '__main__':
    asyncio.run(main())