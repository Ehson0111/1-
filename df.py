import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests
from datetime import datetime
import asyncio
import uuid
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ODATA_URL = os.getenv('ODATA_URL', 'http://localhost/proekt/odata/standard.odata/')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω—ã
user_carts = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderStates(StatesGroup):
    selecting_products = State()
    entering_quantity = State()
    selecting_payment = State()
    entering_address = State()
    confirming_order = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8 BOM –≤ –æ—Ç–≤–µ—Ç–∞—Ö
def decode_response(response):
    try:
        response.encoding = 'utf-8-sig'
        return response.json()
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        raise

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    await message.answer(
        "<b>ü§ñ –ë–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
        "/neworder - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/newclient [–∏–º—è] [—Ç–µ–ª–µ—Ñ–æ–Ω] [–∞–¥—Ä–µ—Å] - –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "/couriers - –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤\n"
        "/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/cart - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "/status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞] - –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

@dp.message(Command("products"))
async def cmd_products(message: types.Message):
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã?$filter=DeletionMark eq false&$top=20&$format=json",
            timeout=10
        )
        response.raise_for_status()
        products = decode_response(response).get('value', [])
        if not products:
            await message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        text = "<b>üõçÔ∏è –¢–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 20):</b>\n\n"
        for product in products:
            text += (
                f"<b>{product.get('Description', '')}</b>\n"
                f"üí∞ <i>–¶–µ–Ω–∞:</i> {product.get('–¶–µ–Ω–∞', 'N/A')} —Ä—É–±.\n"
                f"#Ô∏è‚É£ <i>–ö–æ–¥:</i> {product.get('Code', '')}\n\n"
            )
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")

@dp.message(Command("neworder"))
async def cmd_new_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_carts[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã?$filter=DeletionMark eq false &$top=10 &$format=json",
            timeout=10
        )
        response.raise_for_status()
        products = decode_response(response).get('value', [])
        if not products:
            await message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        builder = InlineKeyboardBuilder()
        for product in products:
            builder.add(
                types.InlineKeyboardButton(
                    text=f"{product.get('Description', '')} ({product.get('–¶–µ–Ω–∞', 'N/A')} —Ä—É–±.)",
                    callback_data=f"product_{product['Ref_Key']}"
                )
            )
        builder.add(
            types.InlineKeyboardButton(
                text="üõí –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="finish_selection"
            )
        )
        builder.adjust(1)
        await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=builder.as_markup())
        await state.set_state(OrderStates.selecting_products)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@dp.callback_query(lambda c: c.data.startswith("product_"), OrderStates.selecting_products)
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_")[1]
    await state.update_data(current_product=product_id)
    await callback.message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):")
    await state.set_state(OrderStates.entering_quantity)
    await callback.answer()

@dp.message(OrderStates.entering_quantity)
async def enter_quantity(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        data = await state.get_data()
        product_id = data['current_product']
        response = requests.get(
            f"{ODATA_URL}Catalog_–¢–æ–≤–∞—Ä—ã(guid'{product_id}')?$format=json",
            timeout=10
        )
        response.raise_for_status()
        product = decode_response(response)
        user_carts[user_id].append({
            'Ref_Key': product_id,
            'Description': product['Description'],
            '–¶–µ–Ω–∞': float(product.get('–¶–µ–Ω–∞', 0)),
            'Quantity': quantity
        })
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product['Description']} x{quantity}")
        await cmd_new_order(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@dp.callback_query(lambda c: c.data == "finish_selection", OrderStates.selecting_products)
async def finish_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not user_carts.get(user_id):
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await state.clear()
        return
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üí≥ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_cash"),
        types.InlineKeyboardButton(text="üí∏ –ö–∞—Ä—Ç–∞", callback_data="payment_card")
    )
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=builder.as_markup())
    await state.set_state(OrderStates.selecting_payment)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("payment_"), OrderStates.selecting_payment)
async def select_payment(callback: types.CallbackQuery, state: FSMContext):
    payment_method = callback.data.split("_")[1]
    await state.update_data(payment_method=payment_method)
    await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.entering_address)
    await callback.answer()

@dp.message(OrderStates.entering_address)
async def enter_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    user_id = message.from_user.id
    await state.update_data(address=address)
    data = await state.get_data()
    cart = user_carts.get(user_id, [])
    total = sum(item['–¶–µ–Ω–∞'] * item['Quantity'] for item in cart)
    order_text = "<b>üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    for item in cart:
        order_text += f"{item['Description']} x{item['Quantity']} = {item['–¶–µ–Ω–∞'] * item['Quantity']} —Ä—É–±.\n"
    order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±.\n"
    order_text += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {'–ù–∞–ª–∏—á–Ω—ã–µ' if data['payment_method'] == 'cash' else '–ö–∞—Ä—Ç–∞'}\n"
    order_text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}"
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    )
    await message.answer(order_text, reply_markup=builder.as_markup())
    await state.set_state(OrderStates.confirming_order)

@dp.callback_query(lambda c: c.data == "confirm_order", OrderStates.confirming_order)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    cart = user_carts.get(user_id, [])
    total = sum(item['–¶–µ–Ω–∞'] * item['Quantity'] for item in cart)
    headers
    try:
        # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID
        telegram_id = callback.from_user.id
        response = requests.get(
            f"{ODATA_URL}Catalog_–ö–ª–∏–µ–Ω—Ç—ã?$filter=–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ eq '{telegram_id}'&$format=json",
            timeout=10
        )
        response.raise_for_status()
        clients = decode_response(response).get('value', [])
        client_key = clients[0]['Ref_Key'] if clients else None
        if not client_key:
            await callback.message.edit_text("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /newclient")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = {
            "Ref_Key": str(uuid.uuid4()),
            "Date": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
            "–ö–ª–∏–µ–Ω—Ç—ã_Key": client_key,
            "–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤": str(total),
            "–ú–µ—Ç–æ–¥–û–ø–ª–∞—Ç—ã": "–ù–∞–ª–∏—á–Ω—ã–µ" if data["payment_method"] == "cash" else "–ö–∞—Ä—Ç–∞",
            "–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞": "–ù–æ–≤—ã–π",
            "–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏": data["address"],
            "–¢–æ–≤–∞—Ä—ã": [
                {
                    "–ü—Ä–æ–¥—É–∫—Ç—ã_Key": item["Ref_Key"],
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item["Quantity"],
                    "–¶–µ–Ω–∞": str(item["–¶–µ–Ω–∞"]),
                    "–°—É–º–º–∞": str(item["–¶–µ–Ω–∞"] * item["Quantity"]),
                    "LineNumber": idx + 1
                } for idx, item in enumerate(cart)
            ]
        }

        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json'
        }

        try:
            response = requests.post(
                f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞",
                json=order,
                headers=headers,
                timeout=10
            )
            response.raise_for_status()
            order_data = decode_response(response)
            order_key = order_data.get('Ref_Key')

            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
            await assign_courier(order_key, user_id, data["address"])

            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_data.get('Number', order_key)} —Å–æ–∑–¥–∞–Ω!\n"
                f"üìç –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {data['address']}"
            )
            user_carts.pop(user_id, None)
        except requests.exceptions.HTTPError as http_err:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {http_err} ‚Äî {response.text}")
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    finally:
        await state.clear()

async def assign_courier(order_key, user_id, address):
    try:
        # –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        response = requests.get(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã?$filter=DeletionMark eq false and –°—Ç–∞—Ç—É—Å eq '–°–≤–æ–±–æ–¥–µ–Ω'&$top=1&$format=json",
            timeout=10
        )
        response.raise_for_status()
        couriers = decode_response(response).get('value', [])
        if not couriers:
            logger.warning("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤")
            await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–∑–∂–µ")
            return
        courier_key = couriers[0]['Ref_Key']
        courier_name = couriers[0].get('Description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—å–µ—Ä')

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
        assignment = {
            'Ref_Key': str(uuid.uuid4()),
            'Date': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S'),
            '–ó–∞–∫–∞–∑_Key': order_key,
            '–ö—É—Ä—å–µ—Ä_Key': courier_key,
            '–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏': '–ù–∞–∑–Ω–∞—á–µ–Ω',
            '–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏': address
        }
        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json'
        }
        response = requests.post(
            f"{ODATA_URL}Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞",
            json=assignment,
            headers=headers,
            timeout=10
        )
        response.raise_for_status()

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞
        response = requests.patch(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã(guid'{courier_key}')",
            json={'–°—Ç–∞—Ç—É—Å': '–ó–∞–Ω—è—Ç'},
            headers=headers,
            timeout=10
        )
        response.raise_for_status()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"üö¥ –ö—É—Ä—å–µ—Ä {courier_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: {e}")
        await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞")

@dp.callback_query(lambda c: c.data == "cancel_order", OrderStates.confirming_order)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_carts.pop(user_id, None)
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()

@dp.message(Command("cart"))
async def cmd_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    for item in cart:
        subtotal = item['–¶–µ–Ω–∞'] * item['Quantity']
        text += f"{item['Description']} x{item['Quantity']} = {subtotal} —Ä—É–±.\n"
        total += subtotal
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±."
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_cart"))
    await message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts.pop(user_id, None)
    await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback.answer()

@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    try:
        response = requests.get(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞?$orderby=Date desc&$top=5&$format=json",
            timeout=10
        )
        response.raise_for_status()
        orders = decode_response(response).get('value', [])
        if not orders:
            await message.answer("üõí –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        builder = InlineKeyboardBuilder()
        for order in orders:
            order_date = datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y')
            builder.add(types.InlineKeyboardButton(
                text=f"‚Ññ{order['Number']} –æ—Ç {order_date}",
                callback_data=f"order_{order['Ref_Key']}"
            ))
        builder.adjust(1)
        await message.answer("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:", reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")

@dp.callback_query(lambda c: c.data.startswith("order_"))
async def show_order_details(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[1]
    try:
        response = requests.get(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞(guid'{order_id}')?$expand=–¢–æ–≤–∞—Ä—ã($expand=–ü—Ä–æ–¥—É–∫—Ç—ã)&$format=json",
            timeout=10
        )
        response.raise_for_status()
        order = decode_response(response)
        order_date = datetime.strptime(order['Date'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y %H:%M')
        products_text = ""
        for item in order.get('–¢–æ–≤–∞—Ä—ã', []):
            product = item.get('–ü—Ä–æ–¥—É–∫—Ç—ã', {})
            products_text += f"- {product.get('Description', 'N/A')} x{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)} = {item.get('–°—É–º–º–∞', 0)} —Ä—É–±.\n"
        text = (
            f"<b>üìÑ –ó–∞–∫–∞–∑ ‚Ññ{order['Number']}</b>\n"
            f"üìÖ <i>–î–∞—Ç–∞:</i> {order_date}\n"
            f"üí∞ <i>–°—É–º–º–∞:</i> {order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', 'N/A')} —Ä—É–±.\n"
            f"üõí <i>–°—Ç–∞—Ç—É—Å:</i> {order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', 'N/A')}\n"
            f"üìç <i>–ê–¥—Ä–µ—Å:</i> {order.get('–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏', 'N/A')}\n"
            f"üì¶ <i>–¢–æ–≤–∞—Ä—ã:</i>\n{products_text}"
        )
        await callback.message.edit_text(text)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞", show_alert=True)

@dp.message(Command("newclient"))
async def cmd_new_client(message: types.Message):
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /newclient [–∏–º—è] [—Ç–µ–ª–µ—Ñ–æ–Ω] [–∞–¥—Ä–µ—Å]")
        return
    name, phone, address = args[1], args[2], args[3]
    new_client = {
        "Description": name,
        "Code": phone[-6:],
        "–ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞": phone,
        "–ê–¥—Ä–µ—Å—Å–î–æ—Å—Ç–∞–≤–∫–∏": address,
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": str(message.from_user.id)
    }
    try:
        response = requests.post(
            f"{ODATA_URL}Catalog_–ö–ª–∏–µ–Ω—Ç—ã",
            json=new_client,
            headers={'Content-Type': 'application/json; charset=utf-8', 'Accept': 'application/json'},
            timeout=10
        )
        response.raise_for_status()
        decode_response(response)
        await message.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç <b>{name}</b> —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")

@dp.message(Command("couriers"))
async def cmd_couriers(message: types.Message):
    try:
        response = requests.get(
            f"{ODATA_URL}Catalog_–ö—É—Ä—å–µ—Ä—ã?$filter=DeletionMark eq false&$format=json",
            timeout=10
        )
        response.raise_for_status()
        couriers = decode_response(response).get('value', [])
        if not couriers:
            await message.answer("üö¥ –ö—É—Ä—å–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        result = "<b>üö¥ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã:</b>\n\n"
        for c in couriers[:10]:
            result += (
                f"<b>{c.get('Description', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>\n"
                f"üìû <i>{c.get('–ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</i>\n"
                f"üõµ <i>{c.get('–°—Ç–∞—Ç—É—Å', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</i>\n\n"
            )
        await message.answer(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞]")
        return
    order_number = args[1].strip()
    try:
        response = requests.get(
            f"{ODATA_URL}Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞?$filter=Number eq '{order_number}'&$expand=–ö—É—Ä—å–µ—Ä&$format=json",
            timeout=10
        )
        response.raise_for_status()
        orders = decode_response(response).get('value', [])
        if not orders:
            await message.answer("üìã –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        order = orders[0]
        courier = order.get('–ö—É—Ä—å–µ—Ä', {})
        delivery_response = requests.get(
            f"{ODATA_URL}Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞?$filter=–ó–∞–∫–∞–∑_Key eq guid'{order['Ref_Key']}'&$format=json",
            timeout=10
        )
        delivery_response.raise_for_status()
        delivery = decode_response(delivery_response).get('value', [{}])[0]
        text = (
            f"<b>üìÑ –ó–∞–∫–∞–∑ ‚Ññ{order['Number']}</b>\n"
            f"üõí <i>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</i> {order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', 'N/A')}\n"
            f"üö¥ <i>–ö—É—Ä—å–µ—Ä:</i> {courier.get('Description', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
            f"üì¶ <i>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</i> {delivery.get('–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
            f"üìç <i>–ê–¥—Ä–µ—Å:</i> {order.get('–ê–¥—Ä–µ—Å–î–æ—Å—Ç–∞–≤–∫–∏', 'N/A')}"
        )
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())