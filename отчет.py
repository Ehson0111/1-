import requests
import matplotlib.pyplot as plt
import pandas as pd
from urllib.parse import urljoin
from datetime import datetime
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost/proekt/odata/standard.odata/"
HEADERS = {'Accept': 'application/json'}

def get_odata_data(endpoint, params=None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ OData-—Å–µ—Ä–≤–∏—Å–∞"""
    url = urljoin(BASE_URL, endpoint)
    try:
        response = requests.get(url, params=params, headers=HEADERS)
        response.raise_for_status()
        return response.json().get('value', [])
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {str(e)}")
        return []

# 2. –û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–∫–∞–∑–∞–º 
def orders_by_customer():
    """–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    params = {
        "$expand": "–ö–ª–∏–µ–Ω—Ç—ã",
        "$select": "–ö–ª–∏–µ–Ω—Ç—ã/Description,Number,Date,–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤"
    }
    
    orders = get_odata_data("Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞", params)
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    df_data = []
    for order in orders:
        client = order.get('–ö–ª–∏–µ–Ω—Ç—ã', None)
        client_description = client.get('Description', '–ë–µ–∑ –∏–º–µ–Ω–∏') if client else '–ë–µ–∑ –∏–º–µ–Ω–∏'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤
        try:
            amount = float(order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', 0)) if order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', '') != '' else 0.0
        except (ValueError, TypeError):
            amount = 0.0
            print(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order.get('Number', 'Unknown')} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤: {order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', 'None')}")

        df_data.append({
            '–ö–ª–∏–µ–Ω—Ç': client_description,
            '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': order.get('Number', ''),
            '–î–∞—Ç–∞': pd.to_datetime(order.get('Date', None), errors='coerce'),
            '–°—É–º–º–∞': amount
        })
    
    df = pd.DataFrame(df_data)
    
    customer_orders = df.groupby('–ö–ª–∏–µ–Ω—Ç').agg({
        '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': 'count',
        '–°—É–º–º–∞': 'sum'
    }).rename(columns={'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'})
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 6))
    customer_orders['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'].plot(kind='bar', color='lightblue')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
    plt.xlabel('–ö–ª–∏–µ–Ω—Ç')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def order_statuses():
    """–û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤"""
    params = {
        "$select": "–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞"
    }
    
    orders = get_odata_data("Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞", params)
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–∫–∞–∑–æ–≤")
        return

    df = pd.DataFrame([order.get('–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞', '–ù–µ —É–∫–∞–∑–∞–Ω') for order in orders], columns=['–°—Ç–∞—Ç—É—Å'])
    status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(8, 8))
    status_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤')
    plt.ylabel('')
    plt.tight_layout()
    plt.show()

def payment_methods():
    """–û—Ç—á–µ—Ç –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã"""
    params = {
        "$select": "–ú–µ—Ç–æ–¥–û–ø–ª–∞—Ç—ã"
    }
    
    orders = get_odata_data("Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞", params)
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã")
        return

    df = pd.DataFrame([order.get('–ú–µ—Ç–æ–¥–û–ø–ª–∞—Ç—ã', '–ù–µ —É–∫–∞–∑–∞–Ω') for order in orders], columns=['–ú–µ—Ç–æ–¥'])
    method_counts = df['–ú–µ—Ç–æ–¥'].value_counts()
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    method_counts.plot(kind='bar', color='coral')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã')
    plt.xlabel('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def average_order_value():
    """–û—Ç—á–µ—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É"""
    params = {
        "$select": "–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤"
    }
    
    orders = get_odata_data("Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞", params)
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    df = pd.DataFrame([float(order.get('–°—É–º–º–∞–ó–∞–∫–∞–∑–æ–≤', 0)) for order in orders], columns=['–°—É–º–º–∞'])
    avg_value = df['–°—É–º–º–∞'].mean()
    
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_value:.2f} —Ä—É–±")
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥, —Ç–∞–∫ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω

# 3. –û—Ç—á–µ—Ç—ã –ø–æ –∫—É—Ä—å–µ—Ä–∞–º
def courier_load():
    """–û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤"""
    params = {
        "$expand": "–ö—É—Ä—å–µ—Ä",
        "$select": "–ö—É—Ä—å–µ—Ä/Description,Date"
    }
    
    assignments = get_odata_data("Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞", params)
    if not assignments:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö –∫—É—Ä—å–µ—Ä–æ–≤")
        return

    df = pd.DataFrame([{
        '–ö—É—Ä—å–µ—Ä': assignment.get('–ö—É—Ä—å–µ—Ä', {}).get('Description', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
        '–î–∞—Ç–∞': pd.to_datetime(assignment.get('Date', None))
    } for assignment in assignments])
    
    courier_counts = df.groupby('–ö—É—Ä—å–µ—Ä').size()
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 6))
    courier_counts.plot(kind='bar', color='lightgreen')
    plt.title('–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π)')
    plt.xlabel('–ö—É—Ä—å–µ—Ä')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def delivery_statuses():
    """–û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–æ—Å—Ç–∞–≤–æ–∫"""
    params = {
        "$select": "–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏"
    }
    
    assignments = get_odata_data("Document_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ö—É—Ä—å–µ—Ä–∞", params)
    if not assignments:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –¥–æ—Å—Ç–∞–≤–æ–∫")
        return

    df = pd.DataFrame([assignment.get('–°—Ç–∞—Ç—É—Å–î–æ—Å—Ç–∞–≤–∫–∏', '–ù–µ —É–∫–∞–∑–∞–Ω') for assignment in assignments], columns=['–°—Ç–∞—Ç—É—Å'])
    status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(8, 8))
    status_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–æ–∫')
    plt.ylabel('')
    plt.tight_layout()
    plt.show()
 
# 6. –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
def active_customers():
    """–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    params = {
        "$expand": "–ö–ª–∏–µ–Ω—Ç—ã",
        "$select": "–ö–ª–∏–µ–Ω—Ç—ã/Description,Number"
    }
    
    orders = get_odata_data("Document_–ó–∞–∫–∞–∑–ö–ª–∏–µ–Ω—Ç–∞", params)
    if not orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö")
        return

    df = pd.DataFrame([{
        '–ö–ª–∏–µ–Ω—Ç': order.get('–ö–ª–∏–µ–Ω—Ç—ã', {}).get('Description', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
        '–ó–∞–∫–∞–∑': order.get('Number', '')
    } for order in orders])
    
    active_counts = df.groupby('–ö–ª–∏–µ–Ω—Ç').size().nlargest(10)
    
    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 6))
    active_counts.plot(kind='bar', color='teal')
    plt.title('–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
    plt.xlabel('–ö–ª–∏–µ–Ω—Ç')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
 
if __name__ == "__main__":
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –í—ã–∑–æ–≤ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
    orders_by_customer()
    order_statuses()
    payment_methods()
    average_order_value()
    courier_load()
    delivery_statuses()
    # courier_efficiency()
    # warehouse_load()
    # goods_movement()
    # revenue_by_period()
    active_customers()
    # telegram_customers()
    # incomplete_orders()
    # low_stock_products()